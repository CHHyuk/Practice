# 모험가 길드
"""
한 마을에 모험가 N명이 있다.
모험가 길드에서는 N명의 모험가를 대상으로 '공포도'를 측정했는데
'공포도'가 높은 모험가는 쉽게 공포를 느껴 위험 상황에서 제대로 대처할 능력이 떨어진다
모험가 길드장인 A는 모험가 그룹을 안전하게 구성하고자 
[공포도가 X인 모험가는 반드시 X명 이상으로 구성한 모험가 그룹에 참여]해야 여행을 떠날 수 있도록 규정하였다
N명의 모험가에 대한 정보가 주어졌을 때 여행을 떠날 수 있는 그룹 수의 최댓값을 구하는 프로그램을 작성하라
모든 모험가를 그룹에 넣을 필요 없음
"""
"""
문제 해결 아이디어
    오름차순 정렬 후 공포도가 낮은 모험가부터 하나씩 확인
    앞에서부터 공포도를 하나씩 확인하며 <현재 그룹에 포함된 모험가의 수>가 <현재 확인하고 있는 공포도>보다 크거나 같다면 그룹으로 설정
    이러한 방법을 이용하면 공포도가 오름차순으로 정렬되어 있다는 점에서, 항상 최소한의 모험가의 수만 포함하여 그룹을 결성하게 됨
"""


# 공포도 리스트를 sort한 후 앞에서부터 하나씩 확인하여 현재 그룹에 포함된 모험가의 수가 현재 확인하고 있는 공포도보다 크거나 같다면 이를 그룹으로 설정
# 이러한 방법을 사용하면 공포도가 오름차순으로 정렬되어 있다는 점에서 항상 최소한의 모험가의 수만 포함하여 그룹을 결성하게 됨

n = int(input())
data = list(map(int,input()))
data.sort()

result = 0 # 총 그룹의 수
count = 0 # 현재 그룹에 포함된 모험가의 수

for i in data: # 공포도를 낮은 것부터 하나씩 확인하며
    count += 1 # 현재 그룹에 해당 모험가를 포함시키기
    if count >= i: # 현재 그룹에 포함된 모험가의 수가 현재의 공포도 이상이라면 그룹 결성
        result += 1 # 총 그룹의 수 증가시키기
        count = 0 # 현재 그룹에 포함된 모험가의 수 초기화
    
print(result) # 총 그룹의 수 출력
