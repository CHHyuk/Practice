{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOoJOSm9dl0l+gr2mlRZOqu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/CHHyuk/Practice/blob/main/Practice/Python/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EA%B8%B0%EC%B4%88%20%EC%88%98%EC%97%85/01-02numpy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fiO6tMcO-FE_",
        "outputId": "9bef9e72-660e-4542-dff9-a55a592199b2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'numpy.ndarray'>\n",
            "<class 'list'>\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "# ndArray\n",
        "\n",
        "# 1차원 ndArray 생성\n",
        "np.array([1,2,3,4])\n",
        "arr1 = np.array([1,2,3,4]) # 넘파이 ndArray\n",
        "arr2 = [1,2,3,4] # 파이썬 리스트\n",
        "\n",
        "print(type(arr1))\n",
        "print(type(arr2))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2차원 ndArray 생성\n",
        "arr2 = np.array([[1,2,3,4],\n",
        "                 [5,6,7,8]])\n",
        "print('2차원 배열 arr2')\n",
        "print(arr2)\n",
        "\n",
        "# 3차원 nbArray 생성\n",
        "arr3 = np.array([[[1.0,2.0,3,4],[5,6,7,8]],\n",
        "                  [[1,2,3,4],[5,6,7,8]]])\n",
        "print('3차원 배열 arr3')\n",
        "print(arr3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4EZBDMD9_HTd",
        "outputId": "4e8097bd-ad9b-45dc-b588-2990bc6da62c"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2차원 배열 arr2\n",
            "[[1 2 3 4]\n",
            " [5 6 7 8]]\n",
            "3차원 배열 arr3\n",
            "[[[1. 2. 3. 4.]\n",
            "  [5. 6. 7. 8.]]\n",
            "\n",
            " [[1. 2. 3. 4.]\n",
            "  [5. 6. 7. 8.]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ndarray.ndim\n",
        "print(arr1.ndim)\n",
        "print(arr2.ndim)\n",
        "print(arr3.ndim)\n",
        "\n",
        "# ndarray.shape\n",
        "print(arr1.shape)\n",
        "print(arr2.shape)\n",
        "print(arr3.shape)\n",
        "\n",
        "# ndarray.size\n",
        "print(arr1.size)\n",
        "print(arr2.size)\n",
        "print(arr3.size)\n",
        "\n",
        "# ndarray.dtype\n",
        "print(arr1.dtype)\n",
        "print(arr2.dtype)\n",
        "print(arr3.dtype)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mGaBTskJCvRx",
        "outputId": "38108887-57dc-419c-fa62-a5de40285a11"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "(4,)\n",
            "(2, 4)\n",
            "(2, 2, 4)\n",
            "4\n",
            "8\n",
            "16\n",
            "int64\n",
            "int64\n",
            "float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 배열 생성 함수\n",
        "# 0으로 채워진 행렬\n",
        "arr_0 = np.zeros((3,4))\n",
        "print(arr_0, type(arr_0))\n",
        "\n",
        "# 1로 채워진 행렬\n",
        "arr_1 = np.ones((2,3,4))\n",
        "print(arr_1)\n",
        "\n",
        "# i로 채워진 행렬\n",
        "arr_i = np.full((4,4),3) # 4x4 행렬을 3으로 채워준다\n",
        "print(arr_i)\n",
        "\n",
        "# like > 다른 배열의 모양을 본따서\n",
        "print(np.zeros_like(arr2))\n",
        "print(np.ones_like(arr2))\n",
        "print(np.full_like(arr2,3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jy7M7vJoJd8j",
        "outputId": "7f6403da-7749-45f1-8aa8-97549bdda050"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0. 0. 0. 0.]\n",
            " [0. 0. 0. 0.]\n",
            " [0. 0. 0. 0.]] <class 'numpy.ndarray'>\n",
            "[[[1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1.]]\n",
            "\n",
            " [[1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1.]]]\n",
            "[[3 3 3 3]\n",
            " [3 3 3 3]\n",
            " [3 3 3 3]\n",
            " [3 3 3 3]]\n",
            "[[0 0 0 0]\n",
            " [0 0 0 0]]\n",
            "[[1 1 1 1]\n",
            " [1 1 1 1]]\n",
            "[[3 3 3 3]\n",
            " [3 3 3 3]]\n"
          ]
        }
      ]
    }
  ]
}